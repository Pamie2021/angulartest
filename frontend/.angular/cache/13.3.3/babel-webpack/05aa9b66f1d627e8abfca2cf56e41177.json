{"ast":null,"code":"import { map, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n/**\r\n * LE DECORATEUR(importer de angular/core) AVEC UN OBJ DE CONFIGURATION PROVIDEDIN AVEC SA VALEUR ROOT:\r\n * c pour enregistre à la racine de l'app\r\n *\r\n *  */\n\nexport let FaceSnapsService = /*#__PURE__*/(() => {\n  class FaceSnapsService {\n    //un constructor pour le http client\n    constructor(http) {\n      this.http = http;\n    } // une methode pour retourner  tous les facesnaps contentu dans le service avec un obsevable\n\n\n    getAllFaceSnaps() {\n      return this.http.get('http://localhost:3000/facesnaps');\n    } // une methode pour retourner  un  facesnaps par ID\n\n\n    getFaceSnapById(faceSnapId) {\n      return this.http.get(`http://localhost:3000/facesnaps/${faceSnapId}`);\n    }\n    /**\r\n    *\r\n    * CRUD\r\n    * 1 la creationd'un Like par un snapId\r\n    * 2.MODIFICATION\r\n    */\n\n    /**\r\n     * 1.REQUETE PUT\r\n     * une methode pour pour récupérer le FaceSnap, et si le deuxième argument est  'like', rajoute un like ;\r\n     * sinon, elle enlève un like. en utilisant (literal type: type literale)\r\n    */\n\n\n    snapFaceSnapById(faceSnapId, snapType) {\n      return this.getFaceSnapById(faceSnapId).pipe( //emission de l'observable avec l'operateur MAP puis retourner le snap modifier\n      map(faceSnap => Object.assign(Object.assign({}, faceSnap), {\n        //recuperation de snaps qu'on a puis on y ajoute un si c = à snap\n        snaps: faceSnap.snaps + (snapType === 'Like' ? 1 : -1)\n      })), //un operateur haut niveau switchmap qui va recevoir le snap mis à jour puis retourner la requete put avec son type\n      switchMap(updatedFaceSnap => this.http.put(`http://localhost:3000/facesnaps/${faceSnapId}`, updatedFaceSnap)));\n    }\n    /**\r\n     * 2.REQUETE POST\r\n     *\r\n     *\r\n    */\n\n\n    addFaceSnap(formValue) {\n      //creation d'un nouveau faceSnap puis l'envoyer sur le serveur\n      return this.getAllFaceSnaps().pipe( //trier les facesnaps pour pouvoir les generer par Id \n      map(facesnaps => [...facesnaps].sort((a, b) => a.id - b.id)), //on va renvoyer le dernier facesnap du trableau avec l'id plus eleve\n      map(sortedFacesnaps => sortedFacesnaps[sortedFacesnaps.length - 1]), map(previousFacesnap => Object.assign(Object.assign({}, formValue), {\n        snaps: 0,\n        createdDate: new Date(),\n        id: previousFacesnap.id + 1\n      })), //un operateur haut niveau switchmap qui va recevoir le snap mis à jour puis retourner la requete post avec son type\n      switchMap(newFacesnap => this.http.post('http://localhost:3000/facesnaps', newFacesnap)));\n    }\n\n  }\n\n  //fin de class\n  FaceSnapsService.ɵfac = function FaceSnapsService_Factory(t) {\n    return new (t || FaceSnapsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  FaceSnapsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FaceSnapsService,\n    factory: FaceSnapsService.ɵfac,\n    providedIn: 'root'\n  });\n  return FaceSnapsService;\n})();","map":null,"metadata":{},"sourceType":"module"}