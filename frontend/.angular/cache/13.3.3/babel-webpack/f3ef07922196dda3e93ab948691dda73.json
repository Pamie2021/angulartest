{"ast":null,"code":"import { interval } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nexport class AppComponent {\n  ngOnInit() {\n    /**\r\n     *  1.LES OPERATEURS  BAS NIVEAUD'OBSERVABLE: l'ordre est trés important\r\n     */\n    this.interval$ = interval(1000).pipe( //l'operateur filter permet de filtrer les emissions d'un observable en laissant ce qu'on veut\n    filter(value => value % 3 === 0), //transformer les emissions  d'un observable avec map\n    map(value => value % 2 === 0 ? `Je suis ${value} et je suis pair` : `Je suis ${value} et je suis impair`));\n  } //les side effects (les effers secondaire) les emmisions d'un observable qu'on a besoin de reagir sans toucher\n  // une methode logger \n\n\n  logger(text) {\n    console.log(`Log: ${text}`);\n  }\n\n}\n\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)();\n};\n\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 3,\n  vars: 3,\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1);\n      i0.ɵɵpipe(2, \"async\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, ctx.interval$));\n    }\n  },\n  pipes: [i1.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHAuY29tcG9uZW50LnNjc3MifQ== */\"]\n});","map":{"version":3,"sources":["D:/DWWM/ANGULAR/snapface/src/app/app.component.ts"],"names":["interval","map","filter","i0","i1","AppComponent","ngOnInit","interval$","pipe","value","logger","text","console","log","ɵfac","AppComponent_Factory","t","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","template","AppComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵpipe","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ɵɵpipeBind1","pipes","AsyncPipe","styles"],"mappings":"AAAA,SAASA,QAAT,QAAyB,MAAzB;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,MAAMC,YAAN,CAAmB;AACtBC,EAAAA,QAAQ,GAAG;AACP;AACR;AACA;AACQ,SAAKC,SAAL,GAAiBP,QAAQ,CAAC,IAAD,CAAR,CAAeQ,IAAf,EACjB;AACAN,IAAAA,MAAM,CAACO,KAAK,IAAIA,KAAK,GAAG,CAAR,KAAc,CAAxB,CAFW,EAGjB;AACAR,IAAAA,GAAG,CAACQ,KAAK,IAAIA,KAAK,GAAG,CAAR,KAAc,CAAd,GACR,WAAUA,KAAM,kBADR,GAER,WAAUA,KAAM,oBAFlB,CAJc,CAAjB;AAOH,GAZqB,CAatB;AACA;;;AACAC,EAAAA,MAAM,CAACC,IAAD,EAAO;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAa,QAAOF,IAAK,EAAzB;AACH;;AAjBqB;;AAmB1BN,YAAY,CAACS,IAAb,GAAoB,SAASC,oBAAT,CAA8BC,CAA9B,EAAiC;AAAE,SAAO,KAAKA,CAAC,IAAIX,YAAV,GAAP;AAAmC,CAA1F;;AACAA,YAAY,CAACY,IAAb,GAAoB,aAAcd,EAAE,CAACe,iBAAH,CAAqB;AAAEC,EAAAA,IAAI,EAAEd,YAAR;AAAsBe,EAAAA,SAAS,EAAE,CAAC,CAAC,UAAD,CAAD,CAAjC;AAAiDC,EAAAA,KAAK,EAAE,CAAxD;AAA2DC,EAAAA,IAAI,EAAE,CAAjE;AAAoEC,EAAAA,QAAQ,EAAE,SAASC,qBAAT,CAA+BC,EAA/B,EAAmCC,GAAnC,EAAwC;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AACnLtB,MAAAA,EAAE,CAACwB,cAAH,CAAkB,CAAlB,EAAqB,IAArB;AACAxB,MAAAA,EAAE,CAACyB,MAAH,CAAU,CAAV;AACAzB,MAAAA,EAAE,CAAC0B,MAAH,CAAU,CAAV,EAAa,OAAb;AACA1B,MAAAA,EAAE,CAAC2B,YAAH;AACH;;AAAC,QAAIL,EAAE,GAAG,CAAT,EAAY;AACVtB,MAAAA,EAAE,CAAC4B,SAAH,CAAa,CAAb;AACA5B,MAAAA,EAAE,CAAC6B,iBAAH,CAAqB7B,EAAE,CAAC8B,WAAH,CAAe,CAAf,EAAkB,CAAlB,EAAqBP,GAAG,CAACnB,SAAzB,CAArB;AACH;AAAE,GARgD;AAQ9C2B,EAAAA,KAAK,EAAE,CAAC9B,EAAE,CAAC+B,SAAJ,CARuC;AAQvBC,EAAAA,MAAM,EAAE,CAAC,qKAAD;AARe,CAArB,CAAlC","sourcesContent":["import { interval } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { filter } from 'rxjs/operators';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common\";\r\nexport class AppComponent {\r\n    ngOnInit() {\r\n        /**\r\n         *  1.LES OPERATEURS  BAS NIVEAUD'OBSERVABLE: l'ordre est trés important\r\n         */\r\n        this.interval$ = interval(1000).pipe(\r\n        //l'operateur filter permet de filtrer les emissions d'un observable en laissant ce qu'on veut\r\n        filter(value => value % 3 === 0), \r\n        //transformer les emissions  d'un observable avec map\r\n        map(value => value % 2 === 0 ?\r\n            `Je suis ${value} et je suis pair` :\r\n            `Je suis ${value} et je suis impair`));\r\n    }\r\n    //les side effects (les effers secondaire) les emmisions d'un observable qu'on a besoin de reagir sans toucher\r\n    // une methode logger \r\n    logger(text) {\r\n        console.log(`Log: ${text}`);\r\n    }\r\n}\r\nAppComponent.ɵfac = function AppComponent_Factory(t) { return new (t || AppComponent)(); };\r\nAppComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AppComponent, selectors: [[\"app-root\"]], decls: 3, vars: 3, template: function AppComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"h1\");\r\n        i0.ɵɵtext(1);\r\n        i0.ɵɵpipe(2, \"async\");\r\n        i0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, ctx.interval$));\r\n    } }, pipes: [i1.AsyncPipe], styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHAuY29tcG9uZW50LnNjc3MifQ== */\"] });\r\n"]},"metadata":{},"sourceType":"module"}